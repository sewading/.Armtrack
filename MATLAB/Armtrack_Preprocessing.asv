% 还差一个磁力计的初始态消除
format long
% Acc Gryo Mag Pos Ori Quat
list=dir('D:\Files\.Armtrack\data\raw_data');
dt=20; % Sampling time step length
batch_size=1024;
fprintf('Sampling Frequency = %d Hz \n',1000/dt);
A=[];
for o1=3:length(list)
    sublist=dir(strcat(list(o1).folder,'\',list(o1).name));
%     Accelerometer data read in
    disp(strcat('Loading:',32,sublist(1).folder,'\accelerometer.csv'))
    acc=readtable(strcat(sublist(1).folder,'\accelerometer.csv'));
    acc=table2array(acc(:,4:7));
    for o2=1:length(acc)-1
        if acc(o2,1)>=acc(o2+1,1)
            disp('Error: Time stamp not in increasing order')
            disp(strcat(sublist(1).folder,'\accelerometer.csv'))
            pause
        end
    end
%     Gryoscope data read in
    disp(strcat('Loading:',32,sublist(1).folder,'\gyroscope.csv'))
    gyro=readtable(strcat(sublist(1).folder,'\gyroscope.csv'));
    gyro=table2array(gyro(:,4:7));
    for o2=1:length(gyro)-1
        if gyro(o2,1)>=gyro(o2+1,1)
            disp('Error: Time stamp not in increasing order')
            disp(strcat(sublist(1).folder,'\gyroscope.csv'))
            pause
        end
    end
%     Magnetometer data read in
    disp(strcat('Loading:',32,sublist(1).folder,'\magnetometer.csv'))
    mag=readtable(strcat(sublist(1).folder,'\magnetometer.csv'));
    mag=table2array(mag(:,4:7));
    for o2=1:length(mag)-1
        if mag(o2,1)>=mag(o2+1,1)
            disp('Error: Time stamp not in increasing order')
            disp(strcat(sublist(1).folder,'\magnetometer.csv'))
            pause
        end
    end
%     Oculus data read in
%     time_drift=textread(strcat(sublist(1).folder,'\sync.txt'),'%d');
    disp(strcat('Loading:',32,sublist(1).folder,'\oculus_data.csv'))
    oculus=table2array(readtable(strcat(sublist(1).folder,'\oculus_data.csv')));
    for o2=1:length(oculus)-1
        if oculus(o2,1)>=oculus(o2+1,1)
            disp('Error: Time stamp not in increasing order')
            disp(strcat(sublist(1).folder,'\oculus_data.csv'))
            disp(o2)
            pause
        end
    end
%     Human Checking on Timeline---------------------------------------------------------------
    disp('Data Loaded------')
    plot(acc(:,1))
    title('Accelerometer Timeline')
    pause()
    plot(gyro(:,1))
    title('Gyroscope Timeline')
    pause()
    plot(mag(:,1))
    title('Magnetometer Timeline')
    pause()
    plot(oculus(:,1))
    title('Oculus Timeline')
    disp('Please check the data')
    pause()
    pause(.5)
    close
%     Time Synchronization------------------------------------------------------------------------
    disp('Synchronizing Timestamps Using Gyroscope Readings and Oculus Angular Movement Data.')
    disp('Check the Data.')
    disp('If you find anything wrong with the synchronized data, revise the Armtrack_Sync parameters.')
    Angular_Velocity_Normalized=[oculus(:,1),power(sum(power(oculus(:,19:21),2),2),.5)];
    Gyro_Normalized=[gyro(:,1),power(sum(power(gyro(:,2:4),2),2),.5)];
    sampling_dt=15;
    estimated_error_range=50000;
    initial_search_dt=500;
    time_drift=Armtrack_Sync(Gyro_Normalized,Angular_Velocity_Normalized,sampling_dt,estimated_error_range,initial_search_dt);
%     Oculus Data 
    oculus=oculus(:,1:8);
    oculus(:,1)=oculus(:,1)+time_drift;

%     Linear Interpolation - Data Synchronization & Augmentation
    disp('Generating Dataset')
    pause(1)
    clear X t
    t1=max([acc(1,1),gyro(1,1),mag(1,1),oculus(1,1)]);
    t2=min([acc(length(acc),1),gyro(length(gyro),1),mag(length(mag),1),oculus(length(oculus),1)]);
    i1=1; i2=1; i3=1; i4=1; i5=0;
    X=zeros(floor((t2-t1)/dt)+1,1 +3+3+3 +3+4);
    for t=t1 : dt : t2-1
        i5=i5+1;
        while acc(i1+1,1)<t
            i1=i1+1;
        end
        while gyro(i2+1,1)<t
            i2=i2+1;
        end
        while mag(i3+1,1)<t
            i3=i3+1;
        end
        while oculus(i4+1,1)<t
            i4=i4+1;
        end
        T1acc=acc(i1,1); T2acc=acc(i1+1,1);
        T1gyro=gyro(i2,1); T2gyro=gyro(i2+1,1);
        T1mag=mag(i3,1); T2mag=mag(i3+1,1);
        T1oculus=oculus(i4,1); T2oculus=oculus(i4+1,1);
        if T1acc>t || T2acc<t
            disp('error')
            disp(i1)
            disp('acc')
            pause
        end
        if T1gyro>t || T2gyro<t
            disp('error')
            disp(i2)
            disp('gyro')
            pause
        end
        if T1mag>t || T2mag<t
            disp('error')
            disp(i3)
            disp('mag')
            pause
        end
        if T1oculus>t || T2oculus<t
            disp('error')
            disp(i4)
            disp('ocu')
            pause
        end
        data_acc=(acc(i1,2:4)*(T2acc-t)+acc(i1+1,2:4)*(t-T1acc))/(T2acc-T1acc);
        data_gryo=(gyro(i2,2:4)*(T2gyro-t)+gyro(i2+1,2:4)*(t-T1gyro))/(T2gyro-T1gyro);
        data_mag=(mag(i3,2:4)*(T2mag-t)+mag(i3+1,2:4)*(t-T1mag))/(T2mag-T1mag);
        data_oculus=(oculus(i4,2:8)*(T2oculus-t)+oculus(i4+1,2:8)*(t-T1oculus))/(T2oculus-T1oculus);
        X(i5,:)=[t-t1,data_acc,data_gryo,data_mag,data_oculus];
        
        if ~(i5-10000*floor(i5/10000))
            fprintf('Processing......%d\n',i5);
        end
    end
    eval(strcat('data_',list(o1).name,'=X;'))
    X(floor(length(X)/batch_size)*batch_size+1:length(X),:)='';
    A=[A;X];
end

N=length(A);
% Quaternion Transformation into 3-d Rotation Vector------------------------------------------
Q=A(:,14:17);
for o1=1:length(A)
    if A(o1,14)<0
        A(o1,14:17)=-1*A(o1,14:17);
    end
    if sum(abs(A(o1,15:17)))
        A(o1,15:17)=(A(o1,15:17)/power(sum(power(A(o1,15:17),2),2),.5))*acos(A(o1,14))*2;
    end
end
A(:,14)='';
A=[A,Q];
% Denoise Acceleration Data----------------------------------------------------------------------
fprintf('\nDenoising Acceleration Data......\n')
for o1=2:4
    fprintf('Processing...... (%d/3)',o1-1)
    t1=floor(N*9/10+rand*(N-2000)/10);
    t2=t1+1000;
    plot(A(t1:t2,1)/1000,A(t1:t2,o1),'g')
    hold on
    xlabel('Time(s)');
    A(:,o1)=Armtrack_Denoise(A(:,o1),50,[1,4,16,20,6,3],1,.35,3);
    plot(A(t1:t2,1)/1000,A(t1:t2,o1),'r')
    title(strcat('Acceleration Denoising',32,'(',num2str(o1-1),'/3)'));
    disp('Check the Denoising Result.')
    disp('Press ENTER to continue')
    pause()
    close
end
% Denoise Gryo Scope Data? ---------------------------------------------------------------------
% for o1=5:7
%     A(:,o1)=Armtrack_Denoise(A(:,o1),50,[1,4,16,20,6,3],1,.1,10);
% end
% Denoise Magnetometer Data-------------------------------------------------------------------
fprintf('\nDenoising Magnetometer Data......\n')
for o1=8:10
    fprintf('Processing...... (%d/3)',o1-7)
    t1=floor(N*9/10+rand*(N-2000)/10);
    t2=t1+1000;
    plot(A(t1:t2,1)/1000,A(t1:t2,o1),'g')
    hold on
    xlabel('Time(s)');
    A(:,o1)=Armtrack_Denoise(A(:,o1),35,[1,2,5,4,2,1],0.2,.25,4);
    plot(A(t1:t2,1)/1000,A(t1:t2,o1),'r')
    title(strcat('Magnetometer Denoising',32,'(',num2str(o1-7),'/3)'));
    disp('Check the Denoising Result.')
    disp('Press ENTER to continue')
    pause()
    close
end
% Saving Original Magnetometer Data-----------------------------------------------------------
M=A(:,[1,8,9,10]);
% Magnetometer Data Normalization------------------------------------------------------------
A(:,8:10)=A(:,8:10)./power(sum(power(A(:,8:10),2),2),.5);
% Data File Generation----------------------------------------------------------------------------
Output_Dir='D:\Files\.Armtrack\data\data_ready_to_use\';
Output_File_Name=strcat('data_',datestr(now,30));
if exist(strcat(Output_Dir,Output_File_Name,'.xlsx'))
    delete(strcat(Output_Dir,Output_File_Name,'.xlsx'))
end
if exist(strcat(Output_Dir,Output_File_Name,'.csv'))
    delete(strcat(Output_Dir,Output_File_Name,'.csv'))
end
fprintf('Writing %s%s.csv\n',Output_Dir,Output_File_Name)
writematrix(A,strcat(Output_Dir,Output_File_Name,'.txt'))
fprintf('Writing %s%s.xlsx\n',Output_Dir,Output_File_Name)
writematrix(A,strcat(Output_Dir,Output_File_Name,'.xlsx'));
save ('Armtrack_Data.mat','A','M')
% Generating dummy
% datasets------------------------------------------------------------------------------------------
X=A(1,:);
Y=A(N,:);
fprintf('Writing %sdummy1.csv\n',Output_Dir)
dummy1=repmat(X,[N,1]);
writematrix(dummy1,strcat(Output_Dir,'dummy1.csv'));
fprintf('Writing %sdummy2.csv\n',Output_Dir)
dummy2=zeros(size(A));
for o1=1:N
    dummy2(o1,:)=(X*(N-o1)+Y*(o1-1))/(N-1);
%     if ~mod(o1,10000)
%         fprintf('Processing......%d\n',o1)
%     end
end
writematrix(dummy2,strcat(Output_Dir,'dummy2.csv'));
fprintf('Writing %sdummy1.csv\n',Output_Dir)
dummy3=rand(size(A));
writematrix(dummy2,strcat(Output_Dir,'dummy3.csv'));
for o1=1:10
    disp('D O N E')
end
disp(size(A))
disp('Columns of the Dataset:')
disp('1: Timestamp')
disp('2-4: Accelerometer')
disp('5-7: Gyroscope')
disp('8-10: Magnetometer Normalized')
disp('11-13: Position Groundtruth')
disp('14-16: Orientation Groundtruth in the Form of Rotation Vector')
disp('17-20: Orientation Groundtruth in the Form of Quaternion')